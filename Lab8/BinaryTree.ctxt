#BlueJ class context
comment0.target=BinaryTree
comment0.text=\n\ The\ abstract\ class\ deines\ a\ binary\ tree\ used\ with\ nodes\ for\ storing\ generic\ elements.\ the\ class\ defines\ abstract\ method\ insert(E\ e),\ and\ regular\n\ methods\ preOrderString(),\ postOrderString(),\ inOrderString(),\ empty(),\ isEmpty(),\ and\ contains(E\ e).\n\n\ @author\ Padmanabh\ Kaushik\n\ @version\ 4/16/2024\n
comment1.params=
comment1.target=BinaryTree()
comment1.text=\n\ Constructor\ for\ objects\ of\ class\ BinaryTree\n
comment10.params=node\ s
comment10.target=void\ postOrderTraversal(BinaryNode,\ java.lang.StringBuilder)
comment10.text=\n\ Helper\ method\ that\ performs\ a\ post-order\ traversal\ throug\ the\ tree\n\ @param\ node\ root\ of\ the\ tree\n\ @param\ s\ StringBuilder\ object\ that\ is\ used\ to\ create\ the\ string\ expression\ if\ the\ list\n
comment11.params=
comment11.target=void\ empty()
comment11.text=\n\ Removes\ all\ elements\ from\ the\ binary\ tree\n
comment12.params=
comment12.target=boolean\ isEmpty()
comment12.text=\n\ Determines\ if\ the\ binary\ tree\ is\ empty\n\ @return\ bool\ true\ if\ the\ list\ is\ empty,\ else\ false\n
comment2.params=d
comment2.target=boolean\ contains(java.lang.Comparable)
comment2.text=\n\ The\ method\ determines\ if\ an\ item\ e\ is\ present\ in\ the\ binary\ search\ tree\n\ @param\ d\ item\ to\ be\ searched\ for\ in\ the\ Binary\ tree\n\ @return\ bool\ true\ if\ the\ value\ is\ found\ in\ the\ binary\ tree,\ else\ false\n
comment3.params=e
comment3.target=boolean\ insert(java.lang.Comparable)
comment3.text=\n\ Defines\ abstract\ method\ insert()\n
comment4.params=current\ target
comment4.target=boolean\ contains(BinaryNode,\ java.lang.Comparable)
comment4.text=\n\ Helper\ method\ that\ that\ recursively\ calls\ itself\ to\ determine\ if\ a\ item\ target\ is\ present\ in\ the\ binary\ tree\n\ Node\:\ the\ algorithm\ looks\ through\ the\ entirity\ of\ the\ tree\ to\ determine\ the\ final\ outcome.\n\ @param\ current\ root\ of\ the\ binary\ tree\n\ @target\ item\ to\ be\ looked\ for\ in\ the\ binary\ tree\n
comment5.params=
comment5.target=java.lang.String\ preOrderString()
comment5.text=\n\ Returns\ the\ string\ expression\ of\ the\ tree\ by\ performing\ a\ pre-order\ traversal\n\ @return\ str\ Pre-order\ String\ expression\ of\ the\ binary\ tree\n
comment6.params=node\ s
comment6.target=void\ preOrderTraversal(BinaryNode,\ java.lang.StringBuilder)
comment6.text=\n\ Helper\ method\ that\ performs\ a\ pre-order\ traversal\ throug\ the\ tree\n\ @param\ node\ root\ of\ the\ tree\n\ @param\ s\ StringBuilder\ object\ that\ is\ used\ to\ create\ the\ string\ expression\ if\ the\ list\n
comment7.params=
comment7.target=java.lang.String\ inOrderString()
comment7.text=\n\ Returns\ the\ string\ expression\ of\ the\ tree\ by\ performing\ a\ in-order\ traversal\n\ @return\ str\ Pre-order\ String\ expression\ of\ the\ binary\ tree\n
comment8.params=node\ s
comment8.target=void\ inOrderTraversal(BinaryNode,\ java.lang.StringBuilder)
comment8.text=\n\ Helper\ method\ that\ performs\ a\ in-order\ traversal\ throug\ the\ tree\n\ @param\ node\ root\ of\ the\ tree\n\ @param\ s\ StringBuilder\ object\ that\ is\ used\ to\ create\ the\ string\ expression\ if\ the\ list\n
comment9.params=
comment9.target=java.lang.String\ postOrderString()
comment9.text=\n\ Returns\ the\ string\ expression\ of\ the\ tree\ by\ performing\ a\ post-order\ traversal\n\ @return\ str\ Pre-order\ String\ expression\ of\ the\ binary\ tree\n
numComments=13
