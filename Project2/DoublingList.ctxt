#BlueJ class context
comment0.target=DoublingList
comment0.text=\n\ The\ class\ creates\ a\ Doubling\ List.\ A\ doubling\ list\ consists\ of\ a\ head\ and\ a\ tail.\ As\ the\ size\ of\ the\ doubling\ list\ increases,\ nodes\ having\n\ arrays\ as\ a\ power\ of\ 2\ are\ added\ to\ the\ list.\ The\ Doubling\ List\ implements\ the\ add(E\ item),\ add(int\ pos,\ E\ item),\ remove(int\ pos),\ toStringInternal(),\n\ toStringInternal(ListIterator\ iter),\ find(NodeInfo\ info),\ size(),\ listIterator(int\ index)\ method.\n\ \n\ The\ class\ also\ had\ three\ other\ inner\ classes\:\ DoublingIterator,\ DoublingListIterator,\ and\ NodeInfo.\ While\ DoublingIterator\ and\ DoublingListIterator\n\ are\ used\ to\ iterate\ through\ various\ elements\ in\ the\ list,\ the\ NodeInfo\ stores\ information\ about\ a\ list\ item\ whith\ respect\ to\ it's\ specific\ node\n\ location\ and\ offset.\n\n\ @author\ Padmanabh\ Kaushik\n\ @version\ 04/15/2024\n
comment1.params=
comment1.target=DoublingList()
comment1.text=\n\ Default\ constructor\ for\ a\ doubling\ list\n\ A\ doubling\ list\ doesn't\ allow\ null\ objects\n\ \n
comment2.params=item
comment2.target=boolean\ add(java.lang.Object)
comment2.text=\n\ Adds\ an\ item\ to\ the\ Doubling\ List\ without\ using\ the\ list\ iterator\n\ @param\ item\ item\ to\ be\ added\ to\ the\ list\n\ @return\ bool\ if\ the\ item\ is\ succefffully\ added\ to\ the\ list\n
comment3.params=pos\ item
comment3.target=void\ add(int,\ java.lang.Object)
comment3.text=\n\ Adds\ an\ item\ at\ a\ specified\ location\n\ Does\ not\ use\ the\ list\ iterator\n\ @param\ pos\ position\ where\ the\ item\ is\ to\ be\ added\n\ @param\ item\ item\ which\ is\ to\ be\ added\ to\ the\ list\n\ @throws\ IndexOutOfBounds\ Exception\n
comment4.params=pos
comment4.target=java.lang.Object\ remove(int)
comment4.text=\n\ Removes\ and\ returns\ the\ item\ at\ a\ specified\ location\n\ @param\ pos\ position\ from\ where\ the\ item\ is\ to\ be\ removed\n\ @return\ item\ the\ specific\ item\ removed\ from\ the\ specified\ location\n\ @throws\ IndexOutOfBounds\ Exception\ if\ pos\ is\ greater\ than\ size\ or\ pos\ is\ negative\n
comment5.params=
comment5.target=java.lang.String\ toStringInternal()
comment5.text=\n\ Returns\ the\ string\ representation\ of\ the\ doubling\ list\n\ @return\ a\ string\ expression\ for\ the\ list\n
comment6.params=iter
comment6.target=java.lang.String\ toStringInternal(java.util.ListIterator)
comment6.text=\n\ Returns\ the\ string\ expression\ for\ a\ list\ iterator\ object\n\ @param\ iter\ list\ iterator\ to\ be\ converted\ to\ a\ string\n\ @return\ string\ string\ expression\ of\ the\ list\ iterator\ object\n
comment7.params=index
comment7.target=java.util.ListIterator\ listIterator(int)
comment7.text=\n\ Overrides\ listiterator\ abstract\ method\ in\ AbstractSequentialList\n\ @param\ index\ index\ where\ the\ list\ iterator\ should\ start\n\ @return\ a\ new\ DoublingListIterator\ object\n
comment8.params=
comment8.target=int\ size()
comment8.text=\n\ Overrides\ the\ size\ method\ in\ AbstractSequentialList\n\ @reurn\ size\ size\ of\ the\ list\n
comment9.params=pos
comment9.target=DoublingList.NodeInfo\ find(int)
comment9.text=\n\ Helper\ method\ used\ to\ find\ the\ node\ and\ offset\ corresponding\ to\ a\ specific\ global\ index\ of\ the\ list\n\ @param\ pos\ position\ whose\ node\ and\ offset\ are\ to\ be\ determined\n\ @return\ NodeInfo\ A\ NodeInfo\ object\ that\ stores\ the\ node\ and\ offset\ corresponding\ to\ the\ global\ index\n
numComments=10
