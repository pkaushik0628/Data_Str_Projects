#BlueJ class context
comment0.target=Lab7
comment0.text=\n\ The\ class\ Lab\ 7\ calls\ a\ main\ method,\ which\ uses\ a\ scanner\ class\ to\ read\ an\ input\ file\ with\ infix\ operations.\ These\ infix\ operations\ are\ then\n\ processed\ and\ evaluated\ using\ the\ evaluateInfix()\ method.\ The\ class\ Lab\ 7\ also\ defines\ methods\ evaluatePostFix()\ [evaluates\ a\ postfix\ expression],\n\ infixToPostfix()\ [converts\ an\ infix\ to\ postfix\ expression],\ and\ simpleInfixToPostfix()\ [converts\ an\ an\ infix\ without\ powers\ and\ brackets\ to\ postfix].\n\ Helper\ methods\ like\ getOperator(),\ doOperation(),\ getInputPerc(),\ getStackPer(),\ and\ getSymbol()\ have\ been\ defined\ to\ facilitate\ infix\ to\ postfix\n\ conversion\ and\ performing\ postfix\ calculations.\n\n\ @author\ Padmanabh\ Kaushik\n\ @version\ 3/26/2024\n
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment1.text=\n\ Main\ method\ uses\ a\ scanner\ class\ to\ read\ an\ input\ file\ with\ infix\ operations.\ These\ infix\ operations\ are\ then\n\ processed\ and\ evaluated\ using\ the\ evaluateInfix()\ method.\n\ @param\ args\ command\ line\ input\n
comment10.params=op
comment10.target=java.lang.String\ getSymbol(Operator)
comment10.text=\n\ The\ method\ takes\ in\ a\ operator\ and\ gives\ back\ the\ symbol\ for\ that\ operator\n\ @param\ op\ Operator\ whose\ symbol\ is\ to\ be\ obtained\n\ @return\ symbol\ string\ symbol\ for\ the\ operator\n
comment11.params=op\ lhs\ rhs
comment11.target=int\ doOperation(Operator,\ int,\ int)
comment11.text=\n\ Applies\ the\ given\ operator\ to\ the\ given\ ints.\n\ \n\ @param\ op\ operator\ to\ apply\n\ @param\ lhs\ left\ operand\n\ @param\ rhs\ right\ operand\n\ @return\ evaluated\ value\n
comment2.params=postflix
comment2.target=int\ evaluatePostFix(java.lang.String)
comment2.text=\n\ Takes\ a\ postflix\ notation\ and\ returns\ the\ corresponding\ result\n\n\ @param\ \ postflix\ postflix\ string\n\ @return\ \ \ result\ result\ of\ the\ postflix\ expression\n
comment3.params=infix
comment3.target=java.lang.String\ simpleInfixToPostfix(java.lang.String)
comment3.text=\n\ Takes\ in\ an\ inflix\ expression\ without\ parenthesis\ or\ exponents\ and\ converts\ it\ to\ an\ inflix\ expression\n\ @param\ inflix\ inflix\ expression\ to\ be\ converted\ to\ a\ postflix\ expression\n\ @return\ postflix\ resultant\ postflix\ expression\ \n
comment4.params=infix
comment4.target=java.lang.String\ infixToPostfix(java.lang.String)
comment4.text=\n\ Takes\ in\ an\ inflix\ expression\ with\ parenthesis\ or\ exponents\ and\ converts\ it\ to\ an\ inflix\ expression\n\ @param\ inflix\ inflix\ expression\ to\ be\ converted\ to\ a\ postflix\ expression\n\ @return\ postflix\ resultant\ postflix\ expression\ \n
comment5.params=inflix
comment5.target=int\ evaluateInfix(java.lang.String)
comment5.text=\n\ Takes\ in\ an\ infix\ expression\ and\ computes\ the\ result\n\ @param\ inflix\ inflix\ expression\ whose\ result\ is\ to\ be\ calculated\n\ @return\ result\ result\ of\ the\ inflix\ expression\n
comment6.params=op
comment6.target=int\ getSimplePrecedence(Operator)
comment6.text=\n\ Returns\ the\ precedence\ of\ an\ operatot\ for\ an\ expressions\ without\ exponents\n\ and\ parenthesis\n\ @param\ op\ Operator\ whose\ precedence\ is\ to\ be\ determined\n\ @return\ precedence\ precedence\ of\ the\ operatot\n
comment7.params=op
comment7.target=int\ getInputPerc(Operator)
comment7.text=\n\ The\ methods\ gives\ the\ input\ precedence\ of\ an\ operator\n\ @param\ op\ operator\ whose\ input\ precedence\ is\ to\ be\ obtained\n\ @return\ inputPrec\ an\ integer\ value\ defining\ the\ input\ precedence\n
comment8.params=op
comment8.target=int\ getStackPerc(Operator)
comment8.text=\n\ The\ methods\ gives\ the\ stack\ precedence\ of\ an\ operator\n\ @param\ op\ operator\ whose\ stack\ precedence\ is\ to\ be\ obtained\n\ @return\ stackPrec\ an\ integer\ value\ defining\ the\ stack\ precedence\n
comment9.params=op
comment9.target=Operator\ getOperator(java.lang.String)
comment9.text=\n\ Converts\ the\ given\ String\ to\ its\ corresponding\ Operator\ value.\n\ \n\ @param\ op\ String\ to\ convert\n\ @return\ corresponding\ Operator\n\ @throws\ IllegalArgumentException\ if\ op\ is\ not\ a\ supported\ operator\n
numComments=12
